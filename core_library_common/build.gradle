buildscript {
    ext.kotlin_version = "1.3.31"
    ext.junit_version = "4.12"
    ext.library_core_version = "0.1.4-05"
    repositories {
        google()
        gradlePluginPortal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: "kotlin-multiplatform"
apply plugin: "maven-publish"

repositories {
    google()
    gradlePluginPortal()
    mavenCentral()
    jcenter()
}

wrapper {
    gradleVersion = "5.3.1"
    distributionType = "ALL"
}

group = "net.apptronic.core"
version = ext.library_core_version

kotlin {
    iosX64("ios") {
        binaries {
            framework {
                compilations.main {
                    outputKinds("framework")
                    extraOpts "-Xobjc-generics"
                }
            }
        }
        compilations.main {
            outputKinds("framework")
            extraOpts "-Xobjc-generics"
        }
    }
    jvm()
    iosX64 {
        compilations.main {
            outputKinds("framework")
            extraOpts "-Xobjc-generics"
        }
    }
    iosArm64 {
        compilations.main {
            outputKinds("framework")
            extraOpts "-Xobjc-generics"
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin("stdlib-common")
                implementation kotlin("reflect")
            }
        }
        commonTest {
            dependencies {
                implementation kotlin("test-common")
                implementation kotlin("test-annotations-common")
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin("stdlib-jdk8")
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin("test-junit")
            }
        }
        iosMain {
            dependencies {
                implementation kotlin("stdlib-common")
            }
        }
    }
}

publishing {
    publications {
        jvm {
            groupId = "net.apptronic.core"
            artifactId = "core-commons"
            version = project.ext.library_core_version
        }
    }
}

task copyFramework {
    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
    def target = project.findProperty('kotlin.target') ?: 'ios'
    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask

    doLast {
        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
        def targetDir = rootProject.file("../lib_ios/framework")
        delete fileTree(dir: targetDir)
        targetDir.mkdirs()
        copy {
            from srcFile.parent
            into targetDir
            include 'core_library_common.framework/**'
            include 'core_library_common.framework.dSYM'
        }
    }
}