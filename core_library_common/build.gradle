buildscript {
    ext.kotlin_version = "1.3.72"
    ext.coroutines_version = "1.3.8"
    ext.junit_version = "4.12"
    ext.library_core_version = "0.4.0.2"
    repositories {
        google()
        gradlePluginPortal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}

apply plugin: "kotlin-multiplatform"
apply plugin: "maven-publish"
apply plugin: "kotlinx-serialization"

repositories {
    google()
    gradlePluginPortal()
    mavenCentral()
    jcenter()
}

wrapper {
    gradleVersion = "6.1.1"
    distributionType = "ALL"
}

group = "net.apptronic.core"
version = ext.library_core_version

kotlin {
//    iosX64("ios") {
//        binaries {
//            framework {
////                freeCompilerArgs.add("-Xobjc-generics")
//                compilations.main {}
//            }
//        }
//    }
    jvm()
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin("stdlib-common")
                implementation kotlin("reflect")
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin("test-common")
                implementation kotlin("test-annotations-common")
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin("stdlib-jdk8")
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$coroutines_version"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin("test-junit")
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
            }
        }
//        iosMain {
//            dependencies {
//                implementation kotlin("stdlib-common")
//            }
//        }
    }
    targets {
        configure([]) {
            tasks.getByName(compilations.main.compileKotlinTaskName).kotlinOptions {
                jvmTarget = "1.8"
            }
        }
    }
}

Properties awsCredentials = new Properties()
File awsCredentialsFile = file("../aws.credentials")
if (awsCredentialsFile.exists()) {
    awsCredentials.load(awsCredentialsFile.newDataInputStream())
}

publishing {
    publications {
        jvm {
            groupId = "net.apptronic.core"
            artifactId = "core-commons"
            version = project.ext.library_core_version
        }
    }
    repositories {
        maven {
            url "s3://maven.apptronic.net/"
            credentials(AwsCredentials) {
                accessKey awsCredentials.getProperty("accessKey", "")
                secretKey awsCredentials.getProperty("secretKey", "")
            }
        }
    }
}

task publishCoreLibrary {
    dependsOn 'publish'
    doLast {
        println("Invalidation path for CloudFront:")
        println("/net/apptronic/core/core-commons/$library_core_version/*")
    }
}

//task copyFramework {
//    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
//    def target = project.findProperty('kotlin.target') ?: 'ios'
//    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask
//
//    doLast {
//        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
//        def targetDir = rootProject.file("../lib_ios/framework")
//        delete fileTree(dir: targetDir)
//        targetDir.mkdirs()
//        copy {
//            from srcFile.parent
//            into targetDir
//            include 'core_library_common.framework/**'
//            include 'core_library_common.framework.dSYM'
//        }
//    }
//}