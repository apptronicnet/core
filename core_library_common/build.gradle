buildscript {
    ext.kotlin_version = "1.4.10"
    ext.coroutines_version = "1.3.9"
    ext.junit_version = "4.12"
    ext.library_core_version = "0.9.5"
    repositories {
        gradlePluginPortal()
        google()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath 'com.android.tools.build:gradle:4.0.1'
    }
}

apply plugin: "kotlin-multiplatform"
apply plugin: "kotlinx-serialization"
apply plugin: "maven-publish"

repositories {
    gradlePluginPortal()
    google()
    jcenter()
    mavenCentral()
}

group = "net.apptronic.core"
version = ext.library_core_version

kotlin {
    jvm()
    iosX64('ios') {
        binaries {
            framework {
                baseName = 'CoreLibraryCommon'
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin("reflect")
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
            }
        }
        jvmMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$coroutines_version"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin("test-junit")
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
            }
        }
        iosMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-iosx64:$coroutines_version"
            }
        }
    }
    targets {
        configure([]) {
            tasks.getByName(compilations.main.compileKotlinTaskName).kotlinOptions {
                jvmTarget = "1.8"
            }
        }
    }
}

Properties awsCredentials = new Properties()
File awsCredentialsFile = file("../aws.credentials")
if (awsCredentialsFile.exists()) {
    awsCredentials.load(awsCredentialsFile.newDataInputStream())
}

publishing {
    publications {
        jvm {
            groupId = "net.apptronic.core"
            artifactId = "core-commons"
            version = project.ext.library_core_version
        }
    }
    repositories {
        maven {
            url "s3://maven.apptronic.net/"
            credentials(AwsCredentials) {
                accessKey awsCredentials.getProperty("accessKey", "")
                secretKey awsCredentials.getProperty("secretKey", "")
            }
        }
    }
}

task publishCoreLibrary {
    dependsOn 'publish'
    doLast {
        println("Invalidation path for CloudFront:")
        println("/net/apptronic/core/core-commons/$library_core_version/*")
    }
}

def copyFrameworkTo(File targetDir) {
    def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
    delete fileTree(dir: targetDir)
    targetDir.mkdirs()
    copy {
        from srcFile.parent
        into targetDir
        include 'CoreLibraryCommon.framework/**'
        include 'CoreLibraryCommon.framework.dSYM'
    }
}

task copyFramework {
    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
    def target = project.findProperty('kotlin.target') ?: 'ios'
    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask

    doLast {
        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
        def targetDir = rootProject.file("../core_library_ios/ApptronicNetCoreSampleApp/CoreLibraryCommon")
        delete fileTree(dir: targetDir)
        targetDir.mkdirs()
        copy {
            from srcFile.parent
            into targetDir
            include 'CoreLibraryCommon.framework/**'
            include 'CoreLibraryCommon.framework.dSYM'
        }
    }
}