plugins {
    id "kotlin-multiplatform"
    id "maven-publish"
}

group = rootProject.ext.lib_group_id
version = rootProject.ext.lib_version

kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
                              ? presets.iosArm64 : presets.iosX64


        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework('ApptronicNetCore')
            }
        }
    }

    jvm {

    }
    iosX64 {
        compilations.main {
            outputKinds("framework")
            extraOpts "-Xobjc-generics"
        }
    }
    iosArm64 {
        compilations.main {
            outputKinds("framework")
            extraOpts "-Xobjc-generics"
        }
    }
    sourceSets {
        
        commonMain {
            dependencies {
                implementation kotlin("stdlib-common")
                implementation kotlin("reflect")
            }
        }
        commonTest {
            dependencies {
                implementation kotlin("test-common")
                implementation kotlin("test-annotations-common")
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin("stdlib-jdk8")
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin("test-junit")
            }
        }
        iosMain {
            dependencies {
                implementation kotlin("stdlib-common")
            }
        }
    }
}

publishing {
    publications {
        jvm {
            groupId = rootProject.ext.lib_group_id
            artifactId = "core-commons"
            version = rootProject.ext.lib_version
        }
    }
}


task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.ios.binaries.getFramework("ApptronicNetCore", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}

tasks.build.dependsOn packForXCode