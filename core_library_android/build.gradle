buildscript {

    ext.kotlin_version = "1.5.30"
    ext.coroutines_version = "1.5.2"
    ext.junit_version = "4.13.1"
    ext.library_core_version = "0.12.1"
    ext.library_android_version = "0.12.1"

    repositories {
        google()
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlinx:kotlinx-metadata-jvm:0.2.0"
    }
}

Properties awsCredentials = new Properties()
File awsCredentialsFile = file("../aws.credentials")
if (awsCredentialsFile.exists()) {
    awsCredentials.load(awsCredentialsFile.newDataInputStream())
}

allprojects {
    repositories {
        maven {
            url "s3://maven.apptronic.net/"
            credentials(AwsCredentials) {
                accessKey awsCredentials.getProperty("accessKey", "")
                secretKey awsCredentials.getProperty("secretKey", "")
            }
        }
        google()
        mavenCentral()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task bundleLibrary(dependsOn: [
        ':library:bundleDebugAar',
        ':library:sourceJar',
])

task publishLibrary(dependsOn: [
        ':library:publish',
]) {
    doLast {
        println("Invalidation path for CloudFront:")
        println("/net/apptronic/core/core-android/$library_android_version/*")
    }
}

task publishLibraryToMavenLocal(dependsOn: [
        ':library:publishToMavenLocal',
        ':library_compat:publishToMavenLocal',
])

task publishLibToMavenApptronicNet() {
    dependsOn 'clean'
    dependsOn 'bundleLibrary'
    dependsOn 'publishLibrary'
    tasks.findByName('bundleLibrary').mustRunAfter 'clean'
    tasks.findByName('publishLibrary').mustRunAfter 'bundleLibrary'
}

task publishLibToMavenLocal() {
    dependsOn 'clean'
    dependsOn 'bundleLibrary'
    dependsOn 'publishLibraryToMavenLocal'
    tasks.findByName('bundleLibrary').mustRunAfter 'clean'
    tasks.findByName('publishLibraryToMavenLocal').mustRunAfter 'bundleLibrary'
}